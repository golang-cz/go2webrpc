(struct { *schema.WebRPCSchema; SchemaHash string; WebrpcGenVersion string; WebrpcGenCommand string; WebrpcTarget string; WebrpcErrors []*schema.Error; Opts map[string]interface {} }) {
	WebRPCSchema: (*schema.WebRPCSchema)({
		WebrpcVersion: (string) (len=2) "v1",
		SchemaName: (string) (len=8) "PetStore",
		SchemaVersion: (string) (len=5) "vTODO",
		Types: ([]*schema.Type) (len=3 cap=4) {
			(*schema.Type)({
				Kind: (string) (len=4) "enum",
				Name: (string) (len=6) "Status",
				Type: (*schema.VarType)({
					Expr: (string) (len=3) "int",
					Type: (schema.CoreType) 10,
					List: (*schema.VarListType)(<nil>),
					Map: (*schema.VarMapType)(<nil>),
					Struct: (*schema.VarStructType)(<nil>)
				}),
				Fields: ([]*schema.TypeField) (len=4 cap=4) {
					(*schema.TypeField)({
						Name: (string) (len=8) "approved",
						Type: (*schema.VarType)(<nil>),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) (len=1) "0",
							Meta: ([]schema.TypeFieldMeta) <nil>
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=7) "pending",
						Type: (*schema.VarType)(<nil>),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) (len=1) "1",
							Meta: ([]schema.TypeFieldMeta) <nil>
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=6) "closed",
						Type: (*schema.VarType)(<nil>),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) (len=1) "2",
							Meta: ([]schema.TypeFieldMeta) <nil>
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=3) "new",
						Type: (*schema.VarType)(<nil>),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) (len=1) "3",
							Meta: ([]schema.TypeFieldMeta) <nil>
						}
					})
				},
				TypeExtra: (schema.TypeExtra) {
					Optional: (bool) false,
					Value: (string) "",
					Meta: ([]schema.TypeFieldMeta) <nil>
				}
			}),
			(*schema.Type)({
				Kind: (string) (len=6) "struct",
				Name: (string) (len=3) "Tag",
				Type: (*schema.VarType)(<nil>),
				Fields: ([]*schema.TypeField) (len=2 cap=2) {
					(*schema.TypeField)({
						Name: (string) (len=2) "ID",
						Type: (*schema.VarType)({
							Expr: (string) (len=5) "int64",
							Type: (schema.CoreType) 14,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=2) "ID"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=5) "int64"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=4) "Name",
						Type: (*schema.VarType)({
							Expr: (string) (len=6) "string",
							Type: (schema.CoreType) 17,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=4) "Name"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=6) "string"
								}
							}
						}
					})
				},
				TypeExtra: (schema.TypeExtra) {
					Optional: (bool) false,
					Value: (string) "",
					Meta: ([]schema.TypeFieldMeta) <nil>
				}
			}),
			(*schema.Type)({
				Kind: (string) (len=6) "struct",
				Name: (string) (len=3) "Pet",
				Type: (*schema.VarType)(<nil>),
				Fields: ([]*schema.TypeField) (len=12 cap=16) {
					(*schema.TypeField)({
						Name: (string) (len=2) "id",
						Type: (*schema.VarType)({
							Expr: (string) (len=6) "string",
							Type: (schema.CoreType) 17,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=2) "ID"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=5) "int64"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=4) "uuid",
						Type: (*schema.VarType)({
							Expr: (string) (len=6) "string",
							Type: (schema.CoreType) 17,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=4) "UUID"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=4) "name",
						Type: (*schema.VarType)({
							Expr: (string) (len=6) "string",
							Type: (schema.CoreType) 17,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=4) "Name"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=6) "string"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=4) "name"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=9) "available",
						Type: (*schema.VarType)({
							Expr: (string) (len=4) "bool",
							Type: (schema.CoreType) 4,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=9) "Available"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=4) "bool"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=9) "available"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=9) "photoUrls",
						Type: (*schema.VarType)({
							Expr: (string) (len=8) "[]string",
							Type: (schema.CoreType) 19,
							List: (*schema.VarListType)({
								Elem: (*schema.VarType)({
									Expr: (string) (len=6) "string",
									Type: (schema.CoreType) 17,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)(<nil>)
								})
							}),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=8) "[]string"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=4) "tags",
						Type: (*schema.VarType)({
							Expr: (string) (len=5) "[]Tag",
							Type: (schema.CoreType) 19,
							List: (*schema.VarListType)({
								Elem: (*schema.VarType)({
									Expr: (string) (len=3) "Tag",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Tag",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Tag",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=2 cap=2) {
												(*schema.TypeField)({
													Name: (string) (len=2) "ID",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "int64",
														Type: (schema.CoreType) 14,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "Name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								})
							}),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=4) "Tags"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=4) "tags"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=9) "createdAt",
						Type: (*schema.VarType)({
							Expr: (string) (len=9) "timestamp",
							Type: (schema.CoreType) 18,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=9) "deletedAt",
						Type: (*schema.VarType)({
							Expr: (string) (len=9) "timestamp",
							Type: (schema.CoreType) 18,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) true,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=3) "Tag",
						Type: (*schema.VarType)({
							Expr: (string) (len=3) "Tag",
							Type: (schema.CoreType) 21,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)({
								Name: (string) (len=3) "Tag",
								Type: (*schema.Type)({
									Kind: (string) (len=6) "struct",
									Name: (string) (len=3) "Tag",
									Type: (*schema.VarType)(<nil>),
									Fields: ([]*schema.TypeField) (len=2 cap=2) {
										(*schema.TypeField)({
											Name: (string) (len=2) "ID",
											Type: (*schema.VarType)({
												Expr: (string) (len=5) "int64",
												Type: (schema.CoreType) 14,
												List: (*schema.VarListType)(<nil>),
												Map: (*schema.VarMapType)(<nil>),
												Struct: (*schema.VarStructType)(<nil>)
											}),
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.name": (string) (len=2) "ID"
													},
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.type": (string) (len=5) "int64"
													}
												}
											}
										}),
										(*schema.TypeField)({
											Name: (string) (len=4) "Name",
											Type: (*schema.VarType)({
												Expr: (string) (len=6) "string",
												Type: (schema.CoreType) 17,
												List: (*schema.VarListType)(<nil>),
												Map: (*schema.VarMapType)(<nil>),
												Struct: (*schema.VarStructType)(<nil>)
											}),
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.name": (string) (len=4) "Name"
													},
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.type": (string) (len=6) "string"
													}
												}
											}
										})
									},
									TypeExtra: (schema.TypeExtra) {
										Optional: (bool) false,
										Value: (string) "",
										Meta: ([]schema.TypeFieldMeta) <nil>
									}
								})
							})
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=3) "Tag"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=3) "Tag"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=6) "TagPtr",
						Type: (*schema.VarType)({
							Expr: (string) (len=3) "Tag",
							Type: (schema.CoreType) 21,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)({
								Name: (string) (len=3) "Tag",
								Type: (*schema.Type)({
									Kind: (string) (len=6) "struct",
									Name: (string) (len=3) "Tag",
									Type: (*schema.VarType)(<nil>),
									Fields: ([]*schema.TypeField) (len=2 cap=2) {
										(*schema.TypeField)({
											Name: (string) (len=2) "ID",
											Type: (*schema.VarType)({
												Expr: (string) (len=5) "int64",
												Type: (schema.CoreType) 14,
												List: (*schema.VarListType)(<nil>),
												Map: (*schema.VarMapType)(<nil>),
												Struct: (*schema.VarStructType)(<nil>)
											}),
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.name": (string) (len=2) "ID"
													},
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.type": (string) (len=5) "int64"
													}
												}
											}
										}),
										(*schema.TypeField)({
											Name: (string) (len=4) "Name",
											Type: (*schema.VarType)({
												Expr: (string) (len=6) "string",
												Type: (schema.CoreType) 17,
												List: (*schema.VarListType)(<nil>),
												Map: (*schema.VarMapType)(<nil>),
												Struct: (*schema.VarStructType)(<nil>)
											}),
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.name": (string) (len=4) "Name"
													},
													(schema.TypeFieldMeta) (len=1) {
														(string) (len=13) "go.field.type": (string) (len=6) "string"
													}
												}
											}
										})
									},
									TypeExtra: (schema.TypeExtra) {
										Optional: (bool) false,
										Value: (string) "",
										Meta: ([]schema.TypeFieldMeta) <nil>
									}
								})
							})
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) true,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=7) "TagsPtr",
						Type: (*schema.VarType)({
							Expr: (string) (len=5) "[]Tag",
							Type: (schema.CoreType) 19,
							List: (*schema.VarListType)({
								Elem: (*schema.VarType)({
									Expr: (string) (len=3) "Tag",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Tag",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Tag",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=2 cap=2) {
												(*schema.TypeField)({
													Name: (string) (len=2) "ID",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "int64",
														Type: (schema.CoreType) 14,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "Name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								})
							}),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
								}
							}
						}
					}),
					(*schema.TypeField)({
						Name: (string) (len=6) "status",
						Type: (*schema.VarType)({
							Expr: (string) (len=3) "int",
							Type: (schema.CoreType) 10,
							List: (*schema.VarListType)(<nil>),
							Map: (*schema.VarMapType)(<nil>),
							Struct: (*schema.VarStructType)(<nil>)
						}),
						TypeExtra: (schema.TypeExtra) {
							Optional: (bool) false,
							Value: (string) "",
							Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.name": (string) (len=6) "Status"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=13) "go.field.type": (string) (len=6) "Status"
								},
								(schema.TypeFieldMeta) (len=1) {
									(string) (len=11) "go.tag.json": (string) (len=6) "status"
								}
							}
						}
					})
				},
				TypeExtra: (schema.TypeExtra) {
					Optional: (bool) false,
					Value: (string) "",
					Meta: ([]schema.TypeFieldMeta) <nil>
				}
			})
		},
		Errors: ([]*schema.Error) <nil>,
		Services: ([]*schema.Service) (len=1 cap=1) {
			(*schema.Service)({
				Name: (string) (len=8) "PetStore",
				Methods: ([]*schema.Method) (len=5 cap=8) {
					(*schema.Method)({
						Name: (string) (len=9) "CreatePet",
						StreamInput: (bool) false,
						StreamOutput: (bool) false,
						Proxy: (bool) false,
						Inputs: ([]*schema.MethodArgument) (len=1 cap=1) {
							(*schema.MethodArgument)({
								Name: (string) (len=3) "new",
								Type: (*schema.VarType)({
									Expr: (string) (len=3) "Pet",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Pet",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Pet",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=12 cap=16) {
												(*schema.TypeField)({
													Name: (string) (len=2) "id",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "uuid",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "name"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "available",
													Type: (*schema.VarType)({
														Expr: (string) (len=4) "bool",
														Type: (schema.CoreType) 4,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "Available"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "bool"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "available"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "photoUrls",
													Type: (*schema.VarType)({
														Expr: (string) (len=8) "[]string",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=8) "[]string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "tags",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Tags"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "tags"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "createdAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "deletedAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=3) "Tag",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=3) "Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=3) "Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "TagPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=7) "TagsPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "status",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "int",
														Type: (schema.CoreType) 10,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=6) "status"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								}),
								Optional: (bool) false,
								InputArg: (bool) true,
								OutputArg: (bool) false,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Outputs: ([]*schema.MethodArgument) (len=1 cap=2) {
							(*schema.MethodArgument)({
								Name: (string) (len=3) "pet",
								Type: (*schema.VarType)({
									Expr: (string) (len=3) "Pet",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Pet",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Pet",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=12 cap=16) {
												(*schema.TypeField)({
													Name: (string) (len=2) "id",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "uuid",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "name"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "available",
													Type: (*schema.VarType)({
														Expr: (string) (len=4) "bool",
														Type: (schema.CoreType) 4,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "Available"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "bool"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "available"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "photoUrls",
													Type: (*schema.VarType)({
														Expr: (string) (len=8) "[]string",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=8) "[]string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "tags",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Tags"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "tags"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "createdAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "deletedAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=3) "Tag",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=3) "Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=3) "Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "TagPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=7) "TagsPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "status",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "int",
														Type: (schema.CoreType) 10,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=6) "status"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								}),
								Optional: (bool) false,
								InputArg: (bool) false,
								OutputArg: (bool) true,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Service: (*schema.Service)(<already shown>)
					}),
					(*schema.Method)({
						Name: (string) (len=9) "DeletePet",
						StreamInput: (bool) false,
						StreamOutput: (bool) false,
						Proxy: (bool) false,
						Inputs: ([]*schema.MethodArgument) (len=1 cap=1) {
							(*schema.MethodArgument)({
								Name: (string) (len=2) "ID",
								Type: (*schema.VarType)({
									Expr: (string) (len=5) "int64",
									Type: (schema.CoreType) 14,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)(<nil>)
								}),
								Optional: (bool) false,
								InputArg: (bool) true,
								OutputArg: (bool) false,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Outputs: ([]*schema.MethodArgument) (cap=1) {
						},
						Service: (*schema.Service)(<already shown>)
					}),
					(*schema.Method)({
						Name: (string) (len=6) "GetPet",
						StreamInput: (bool) false,
						StreamOutput: (bool) false,
						Proxy: (bool) false,
						Inputs: ([]*schema.MethodArgument) (len=1 cap=1) {
							(*schema.MethodArgument)({
								Name: (string) (len=2) "ID",
								Type: (*schema.VarType)({
									Expr: (string) (len=5) "int64",
									Type: (schema.CoreType) 14,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)(<nil>)
								}),
								Optional: (bool) false,
								InputArg: (bool) true,
								OutputArg: (bool) false,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Outputs: ([]*schema.MethodArgument) (len=1 cap=2) {
							(*schema.MethodArgument)({
								Name: (string) (len=3) "pet",
								Type: (*schema.VarType)({
									Expr: (string) (len=3) "Pet",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Pet",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Pet",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=12 cap=16) {
												(*schema.TypeField)({
													Name: (string) (len=2) "id",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "uuid",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "name"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "available",
													Type: (*schema.VarType)({
														Expr: (string) (len=4) "bool",
														Type: (schema.CoreType) 4,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "Available"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "bool"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "available"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "photoUrls",
													Type: (*schema.VarType)({
														Expr: (string) (len=8) "[]string",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=8) "[]string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "tags",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Tags"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "tags"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "createdAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "deletedAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=3) "Tag",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=3) "Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=3) "Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "TagPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=7) "TagsPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "status",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "int",
														Type: (schema.CoreType) 10,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=6) "status"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								}),
								Optional: (bool) false,
								InputArg: (bool) false,
								OutputArg: (bool) true,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Service: (*schema.Service)(<already shown>)
					}),
					(*schema.Method)({
						Name: (string) (len=8) "ListPets",
						StreamInput: (bool) false,
						StreamOutput: (bool) false,
						Proxy: (bool) false,
						Inputs: ([]*schema.MethodArgument) {
						},
						Outputs: ([]*schema.MethodArgument) (len=1 cap=2) {
							(*schema.MethodArgument)({
								Name: (string) (len=4) "pets",
								Type: (*schema.VarType)({
									Expr: (string) (len=5) "[]Pet",
									Type: (schema.CoreType) 19,
									List: (*schema.VarListType)({
										Elem: (*schema.VarType)({
											Expr: (string) (len=3) "Pet",
											Type: (schema.CoreType) 21,
											List: (*schema.VarListType)(<nil>),
											Map: (*schema.VarMapType)(<nil>),
											Struct: (*schema.VarStructType)({
												Name: (string) (len=3) "Pet",
												Type: (*schema.Type)({
													Kind: (string) (len=6) "struct",
													Name: (string) (len=3) "Pet",
													Type: (*schema.VarType)(<nil>),
													Fields: ([]*schema.TypeField) (len=12 cap=16) {
														(*schema.TypeField)({
															Name: (string) (len=2) "id",
															Type: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=2) "ID"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=5) "int64"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=4) "uuid",
															Type: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=4) "UUID"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=4) "name",
															Type: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=4) "Name"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=6) "string"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=4) "name"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=9) "available",
															Type: (*schema.VarType)({
																Expr: (string) (len=4) "bool",
																Type: (schema.CoreType) 4,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=9) "Available"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=4) "bool"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=9) "available"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=9) "photoUrls",
															Type: (*schema.VarType)({
																Expr: (string) (len=8) "[]string",
																Type: (schema.CoreType) 19,
																List: (*schema.VarListType)({
																	Elem: (*schema.VarType)({
																		Expr: (string) (len=6) "string",
																		Type: (schema.CoreType) 17,
																		List: (*schema.VarListType)(<nil>),
																		Map: (*schema.VarMapType)(<nil>),
																		Struct: (*schema.VarStructType)(<nil>)
																	})
																}),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=8) "[]string"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=4) "tags",
															Type: (*schema.VarType)({
																Expr: (string) (len=5) "[]Tag",
																Type: (schema.CoreType) 19,
																List: (*schema.VarListType)({
																	Elem: (*schema.VarType)({
																		Expr: (string) (len=3) "Tag",
																		Type: (schema.CoreType) 21,
																		List: (*schema.VarListType)(<nil>),
																		Map: (*schema.VarMapType)(<nil>),
																		Struct: (*schema.VarStructType)({
																			Name: (string) (len=3) "Tag",
																			Type: (*schema.Type)({
																				Kind: (string) (len=6) "struct",
																				Name: (string) (len=3) "Tag",
																				Type: (*schema.VarType)(<nil>),
																				Fields: ([]*schema.TypeField) (len=2 cap=2) {
																					(*schema.TypeField)({
																						Name: (string) (len=2) "ID",
																						Type: (*schema.VarType)({
																							Expr: (string) (len=5) "int64",
																							Type: (schema.CoreType) 14,
																							List: (*schema.VarListType)(<nil>),
																							Map: (*schema.VarMapType)(<nil>),
																							Struct: (*schema.VarStructType)(<nil>)
																						}),
																						TypeExtra: (schema.TypeExtra) {
																							Optional: (bool) false,
																							Value: (string) "",
																							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.name": (string) (len=2) "ID"
																								},
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.type": (string) (len=5) "int64"
																								}
																							}
																						}
																					}),
																					(*schema.TypeField)({
																						Name: (string) (len=4) "Name",
																						Type: (*schema.VarType)({
																							Expr: (string) (len=6) "string",
																							Type: (schema.CoreType) 17,
																							List: (*schema.VarListType)(<nil>),
																							Map: (*schema.VarMapType)(<nil>),
																							Struct: (*schema.VarStructType)(<nil>)
																						}),
																						TypeExtra: (schema.TypeExtra) {
																							Optional: (bool) false,
																							Value: (string) "",
																							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.name": (string) (len=4) "Name"
																								},
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.type": (string) (len=6) "string"
																								}
																							}
																						}
																					})
																				},
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) <nil>
																				}
																			})
																		})
																	})
																}),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=4) "Tags"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=4) "tags"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=9) "createdAt",
															Type: (*schema.VarType)({
																Expr: (string) (len=9) "timestamp",
																Type: (schema.CoreType) 18,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=9) "deletedAt",
															Type: (*schema.VarType)({
																Expr: (string) (len=9) "timestamp",
																Type: (schema.CoreType) 18,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) true,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=3) "Tag"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=3) "Tag"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=6) "TagPtr",
															Type: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) true,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=7) "TagsPtr",
															Type: (*schema.VarType)({
																Expr: (string) (len=5) "[]Tag",
																Type: (schema.CoreType) 19,
																List: (*schema.VarListType)({
																	Elem: (*schema.VarType)({
																		Expr: (string) (len=3) "Tag",
																		Type: (schema.CoreType) 21,
																		List: (*schema.VarListType)(<nil>),
																		Map: (*schema.VarMapType)(<nil>),
																		Struct: (*schema.VarStructType)({
																			Name: (string) (len=3) "Tag",
																			Type: (*schema.Type)({
																				Kind: (string) (len=6) "struct",
																				Name: (string) (len=3) "Tag",
																				Type: (*schema.VarType)(<nil>),
																				Fields: ([]*schema.TypeField) (len=2 cap=2) {
																					(*schema.TypeField)({
																						Name: (string) (len=2) "ID",
																						Type: (*schema.VarType)({
																							Expr: (string) (len=5) "int64",
																							Type: (schema.CoreType) 14,
																							List: (*schema.VarListType)(<nil>),
																							Map: (*schema.VarMapType)(<nil>),
																							Struct: (*schema.VarStructType)(<nil>)
																						}),
																						TypeExtra: (schema.TypeExtra) {
																							Optional: (bool) false,
																							Value: (string) "",
																							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.name": (string) (len=2) "ID"
																								},
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.type": (string) (len=5) "int64"
																								}
																							}
																						}
																					}),
																					(*schema.TypeField)({
																						Name: (string) (len=4) "Name",
																						Type: (*schema.VarType)({
																							Expr: (string) (len=6) "string",
																							Type: (schema.CoreType) 17,
																							List: (*schema.VarListType)(<nil>),
																							Map: (*schema.VarMapType)(<nil>),
																							Struct: (*schema.VarStructType)(<nil>)
																						}),
																						TypeExtra: (schema.TypeExtra) {
																							Optional: (bool) false,
																							Value: (string) "",
																							Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.name": (string) (len=4) "Name"
																								},
																								(schema.TypeFieldMeta) (len=1) {
																									(string) (len=13) "go.field.type": (string) (len=6) "string"
																								}
																							}
																						}
																					})
																				},
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) <nil>
																				}
																			})
																		})
																	})
																}),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
																	}
																}
															}
														}),
														(*schema.TypeField)({
															Name: (string) (len=6) "status",
															Type: (*schema.VarType)({
																Expr: (string) (len=3) "int",
																Type: (schema.CoreType) 10,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															}),
															TypeExtra: (schema.TypeExtra) {
																Optional: (bool) false,
																Value: (string) "",
																Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.name": (string) (len=6) "Status"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=13) "go.field.type": (string) (len=6) "Status"
																	},
																	(schema.TypeFieldMeta) (len=1) {
																		(string) (len=11) "go.tag.json": (string) (len=6) "status"
																	}
																}
															}
														})
													},
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) <nil>
													}
												})
											})
										})
									}),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)(<nil>)
								}),
								Optional: (bool) false,
								InputArg: (bool) false,
								OutputArg: (bool) true,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Service: (*schema.Service)(<already shown>)
					}),
					(*schema.Method)({
						Name: (string) (len=9) "UpdatePet",
						StreamInput: (bool) false,
						StreamOutput: (bool) false,
						Proxy: (bool) false,
						Inputs: ([]*schema.MethodArgument) (len=2 cap=3) {
							(*schema.MethodArgument)({
								Name: (string) (len=2) "ID",
								Type: (*schema.VarType)({
									Expr: (string) (len=5) "int64",
									Type: (schema.CoreType) 14,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)(<nil>)
								}),
								Optional: (bool) false,
								InputArg: (bool) true,
								OutputArg: (bool) false,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							}),
							(*schema.MethodArgument)({
								Name: (string) (len=6) "update",
								Type: (*schema.VarType)({
									Expr: (string) (len=3) "Pet",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Pet",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Pet",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=12 cap=16) {
												(*schema.TypeField)({
													Name: (string) (len=2) "id",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "uuid",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "name"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "available",
													Type: (*schema.VarType)({
														Expr: (string) (len=4) "bool",
														Type: (schema.CoreType) 4,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "Available"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "bool"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "available"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "photoUrls",
													Type: (*schema.VarType)({
														Expr: (string) (len=8) "[]string",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=8) "[]string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "tags",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Tags"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "tags"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "createdAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "deletedAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=3) "Tag",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=3) "Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=3) "Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "TagPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=7) "TagsPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "status",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "int",
														Type: (schema.CoreType) 10,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=6) "status"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								}),
								Optional: (bool) false,
								InputArg: (bool) true,
								OutputArg: (bool) false,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Outputs: ([]*schema.MethodArgument) (len=1 cap=2) {
							(*schema.MethodArgument)({
								Name: (string) (len=3) "pet",
								Type: (*schema.VarType)({
									Expr: (string) (len=3) "Pet",
									Type: (schema.CoreType) 21,
									List: (*schema.VarListType)(<nil>),
									Map: (*schema.VarMapType)(<nil>),
									Struct: (*schema.VarStructType)({
										Name: (string) (len=3) "Pet",
										Type: (*schema.Type)({
											Kind: (string) (len=6) "struct",
											Name: (string) (len=3) "Pet",
											Type: (*schema.VarType)(<nil>),
											Fields: ([]*schema.TypeField) (len=12 cap=16) {
												(*schema.TypeField)({
													Name: (string) (len=2) "id",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=2) "ID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "int64"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "id,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "uuid",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=4 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "uuid.UUID"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=14) "go.type.import": (string) (len=22) "github.com/google/uuid"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=11) "uuid,string"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "name",
													Type: (*schema.VarType)({
														Expr: (string) (len=6) "string",
														Type: (schema.CoreType) 17,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Name"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "name"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "available",
													Type: (*schema.VarType)({
														Expr: (string) (len=4) "bool",
														Type: (schema.CoreType) 4,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "Available"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "bool"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "available"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "photoUrls",
													Type: (*schema.VarType)({
														Expr: (string) (len=8) "[]string",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=6) "string",
																Type: (schema.CoreType) 17,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)(<nil>)
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "PhotoURLs"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=8) "[]string"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "photoUrls"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=4) "tags",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=4) "Tags"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=4) "tags"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "createdAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "CreatedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=9) "time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "createdAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=9) "deletedAt",
													Type: (*schema.VarType)({
														Expr: (string) (len=9) "timestamp",
														Type: (schema.CoreType) 18,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=9) "DeletedAt"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=10) "*time.Time"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=9) "deletedAt"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=3) "Tag",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=3) "Tag"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=3) "Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "TagPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "Tag",
														Type: (schema.CoreType) 21,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)({
															Name: (string) (len=3) "Tag",
															Type: (*schema.Type)({
																Kind: (string) (len=6) "struct",
																Name: (string) (len=3) "Tag",
																Type: (*schema.VarType)(<nil>),
																Fields: ([]*schema.TypeField) (len=2 cap=2) {
																	(*schema.TypeField)({
																		Name: (string) (len=2) "ID",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=5) "int64",
																			Type: (schema.CoreType) 14,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=2) "ID"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=5) "int64"
																				}
																			}
																		}
																	}),
																	(*schema.TypeField)({
																		Name: (string) (len=4) "Name",
																		Type: (*schema.VarType)({
																			Expr: (string) (len=6) "string",
																			Type: (schema.CoreType) 17,
																			List: (*schema.VarListType)(<nil>),
																			Map: (*schema.VarMapType)(<nil>),
																			Struct: (*schema.VarStructType)(<nil>)
																		}),
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.name": (string) (len=4) "Name"
																				},
																				(schema.TypeFieldMeta) (len=1) {
																					(string) (len=13) "go.field.type": (string) (len=6) "string"
																				}
																			}
																		}
																	})
																},
																TypeExtra: (schema.TypeExtra) {
																	Optional: (bool) false,
																	Value: (string) "",
																	Meta: ([]schema.TypeFieldMeta) <nil>
																}
															})
														})
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) true,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "TagPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=4) "*Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=7) "TagsPtr",
													Type: (*schema.VarType)({
														Expr: (string) (len=5) "[]Tag",
														Type: (schema.CoreType) 19,
														List: (*schema.VarListType)({
															Elem: (*schema.VarType)({
																Expr: (string) (len=3) "Tag",
																Type: (schema.CoreType) 21,
																List: (*schema.VarListType)(<nil>),
																Map: (*schema.VarMapType)(<nil>),
																Struct: (*schema.VarStructType)({
																	Name: (string) (len=3) "Tag",
																	Type: (*schema.Type)({
																		Kind: (string) (len=6) "struct",
																		Name: (string) (len=3) "Tag",
																		Type: (*schema.VarType)(<nil>),
																		Fields: ([]*schema.TypeField) (len=2 cap=2) {
																			(*schema.TypeField)({
																				Name: (string) (len=2) "ID",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=5) "int64",
																					Type: (schema.CoreType) 14,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=2) "ID"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=5) "int64"
																						}
																					}
																				}
																			}),
																			(*schema.TypeField)({
																				Name: (string) (len=4) "Name",
																				Type: (*schema.VarType)({
																					Expr: (string) (len=6) "string",
																					Type: (schema.CoreType) 17,
																					List: (*schema.VarListType)(<nil>),
																					Map: (*schema.VarMapType)(<nil>),
																					Struct: (*schema.VarStructType)(<nil>)
																				}),
																				TypeExtra: (schema.TypeExtra) {
																					Optional: (bool) false,
																					Value: (string) "",
																					Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.name": (string) (len=4) "Name"
																						},
																						(schema.TypeFieldMeta) (len=1) {
																							(string) (len=13) "go.field.type": (string) (len=6) "string"
																						}
																					}
																				}
																			})
																		},
																		TypeExtra: (schema.TypeExtra) {
																			Optional: (bool) false,
																			Value: (string) "",
																			Meta: ([]schema.TypeFieldMeta) <nil>
																		}
																	})
																})
															})
														}),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=2 cap=2) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=7) "TagsPtr"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=5) "[]Tag"
															}
														}
													}
												}),
												(*schema.TypeField)({
													Name: (string) (len=6) "status",
													Type: (*schema.VarType)({
														Expr: (string) (len=3) "int",
														Type: (schema.CoreType) 10,
														List: (*schema.VarListType)(<nil>),
														Map: (*schema.VarMapType)(<nil>),
														Struct: (*schema.VarStructType)(<nil>)
													}),
													TypeExtra: (schema.TypeExtra) {
														Optional: (bool) false,
														Value: (string) "",
														Meta: ([]schema.TypeFieldMeta) (len=3 cap=4) {
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.name": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=13) "go.field.type": (string) (len=6) "Status"
															},
															(schema.TypeFieldMeta) (len=1) {
																(string) (len=11) "go.tag.json": (string) (len=6) "status"
															}
														}
													}
												})
											},
											TypeExtra: (schema.TypeExtra) {
												Optional: (bool) false,
												Value: (string) "",
												Meta: ([]schema.TypeFieldMeta) <nil>
											}
										})
									})
								}),
								Optional: (bool) false,
								InputArg: (bool) false,
								OutputArg: (bool) true,
								TypeExtra: (schema.TypeExtra) {
									Optional: (bool) false,
									Value: (string) "",
									Meta: ([]schema.TypeFieldMeta) <nil>
								}
							})
						},
						Service: (*schema.Service)(<already shown>)
					})
				},
				Schema: (*schema.WebRPCSchema)(<already shown>)
			})
		},
		Deprecated_Messages: ([]interface {}) <nil>
	}),
	SchemaHash: (string) (len=40) "204f6b26587305ef3a4c043b8636035ada3889ef",
	WebrpcGenVersion: (string) (len=11) "v0.14.0-dev",
	WebrpcGenCommand: (string) (len=9) "gospeak .",
	WebrpcTarget: (string) (len=5) "debug",
	WebrpcErrors: ([]*schema.Error) (len=8 cap=8) {
		(*schema.Error)({
			Code: (int) 0,
			Name: (string) (len=14) "WebrpcEndpoint",
			Message: (string) (len=14) "endpoint error",
			HTTPStatus: (int) 400
		}),
		(*schema.Error)({
			Code: (int) -1,
			Name: (string) (len=19) "WebrpcRequestFailed",
			Message: (string) (len=14) "request failed",
			HTTPStatus: (int) 400
		}),
		(*schema.Error)({
			Code: (int) -2,
			Name: (string) (len=14) "WebrpcBadRoute",
			Message: (string) (len=9) "bad route",
			HTTPStatus: (int) 404
		}),
		(*schema.Error)({
			Code: (int) -3,
			Name: (string) (len=15) "WebrpcBadMethod",
			Message: (string) (len=10) "bad method",
			HTTPStatus: (int) 405
		}),
		(*schema.Error)({
			Code: (int) -4,
			Name: (string) (len=16) "WebrpcBadRequest",
			Message: (string) (len=11) "bad request",
			HTTPStatus: (int) 400
		}),
		(*schema.Error)({
			Code: (int) -5,
			Name: (string) (len=17) "WebrpcBadResponse",
			Message: (string) (len=12) "bad response",
			HTTPStatus: (int) 500
		}),
		(*schema.Error)({
			Code: (int) -6,
			Name: (string) (len=17) "WebrpcServerPanic",
			Message: (string) (len=12) "server panic",
			HTTPStatus: (int) 500
		}),
		(*schema.Error)({
			Code: (int) -7,
			Name: (string) (len=19) "WebrpcInternalError",
			Message: (string) (len=14) "internal error",
			HTTPStatus: (int) 500
		})
	},
	Opts: (map[string]interface {}) {
	}
}
